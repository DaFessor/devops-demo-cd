# This workflow is triggered on push to the main branch and on pull requests
# to the main branch. It runs all tests, builds a Docker image, and deploys
# the test coverage report to GitHub Pages.
name: Run tests and update image and coverage report

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  run_tests_and_update_image_and_coverage_report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # First we need to check out the code
      - name: Checkout repo
        uses: actions/Checkout@v4

      # Then we need to set a Java development environment
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
            distribution: 'zulu'
            java-version: '21'

      # Build the project
      - name: Build the application
        run: |
           mvn package -Dmaven.test.skip

      # Do a trial deployment to minikube - step 1 install/start Minikube
      - name: Start minikube
        uses: medyagh/setup-minikube@latest
      # Step 2 - check that the cluster is running
      - name: Check that cluster runs
        run: minikube kubectl get pods -- -A
      # Step 3 - build image with our application
      - name: Build image
        run: minikube image build -t local/devops-demo-cd:v1.0.0 .
      # Step 4 - deploy the image to the cluster
      - name: Deploy to minikube
        run:
          minikube kubectl apply -- --filename=backend-deployment.yaml,backend-service.yaml,db-deployment.yaml,db-service.yaml,db-persistentvolumeclaim.yaml
          minikube kubectl rollout status deployment db backend -- -n default --timeout=60s
      # Step 5 - check that the deployment works by doing some REST calls
      - name: Test service URLs
        run: |
          minikube service list
          minikube service backend --url
          echo "------------------opening the service------------------"
          curl --location "$(minikube service backend --url)/api/v1/tasks" --header 'Content-Type: application/json'

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-report
          path: target/site/jacoco/
          retention-days: 7

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish updated image
        run: |
          mvn package
          reponame_lowercase=${GITHUB_REPOSITORY,,}
          image_name=$(echo ${reponame_lowercase} | cut -f2 -d/)-img
          image_tag=ghcr.io/${reponame_lowercase}/${image_name}:latest
          echo "Image tag is ${image_tag}"
          docker build . --tag ${image_tag}
          docker push ${image_tag}

  update_gh_pages:
    runs-on: ubuntu-latest
    needs: run_tests_and_update_image_and_coverage_report
    permissions:
      contents: read
      packages: write
      id-token: write
      pages: write
    environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download latest test coverage report
        uses: actions/download-artifact@v4
        with:
          name: test-coverage-report
          path: coverage

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './coverage/'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4