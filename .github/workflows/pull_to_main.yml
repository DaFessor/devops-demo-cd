# This workflow is triggered on push to the main branch and on pull requests
# to the main branch. It runs all tests, builds a Docker image, and deploys
# the test coverage report to GitHub Pages.
name: Build and Deploy to Minikube

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  build_app_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # First we need to check out the code
      - name: Checkout repo
        uses: actions/Checkout@v4

      # Then we need to set a Java development environment
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
            distribution: 'zulu'
            java-version: '21'

      # Build the project
      - name: Build the application
        run: |
           mvn package -Dmaven.test.skip

      # Do a trial deployment to minikube - step 1 install/start Minikube
      - name: Start minikube
        uses: medyagh/setup-minikube@latest
      # Step 2 - check that the cluster is running
      - name: Check that cluster runs
        run: minikube kubectl get pods -- -A
      # Step 3 - build image with our application
      - name: Build image
          export SHELL=/bin/bash
          eval $(minikube -p minikube docker-env)
        run: minikube image build -t devops-demo-cd:v1.0.0 .
      # Step 4 - deploy the image to the cluster
      - name: Deploy to minikube
        run: |
          cd k8s && kubectl apply --filename=backend-deployment.yaml,backend-service.yaml,db-deployment.yaml,db-service.yaml,db-persistentvolumeclaim.yaml
          minikube kubectl rollout status deployment db backend -- -n default --timeout=60s
          kubectl get all
      # Step 5 - check that the application is running
      - name: Check that application is running
        run: |
          minikube service backend &> url_backend &
          sleep 10
          BACKEND_URL=$(cat url_backend | grep -oP "http:\/\/[0-9.:]+" | tail -n1)/api/v1/tasks
          echo "Backend URL: ${BACKEND_URL}"
          curl "${BACKEND_URL}" --header 'Content-Type: application/json' --data '{"name":"Learn Spring Boot","description":"Complete the Spring Boot task list tutorial"}'
